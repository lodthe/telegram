// Code generated by telegram-apigen. DO NOT EDIT.

package telegram

import "encoding/json"

// This object represents a sticker.
type Sticker struct {
	// Identifier for this file, which can be used to download or reuse the file
	FileID string `json:"file_id"`

	// Unique identifier for this file, which is supposed to be the same over time and
	// for different bots. Can't be used to download or reuse the file.
	FileUniqueID string `json:"file_unique_id"`

	// Sticker width
	Width int `json:"width"`

	// Sticker height
	Height int `json:"height"`

	// True, if the sticker is animated
	IsAnimated bool `json:"is_animated"`

	// Optional. Sticker thumbnail in the .webp or .jpg format
	Thumb *PhotoSize `json:"thumb,omitempty"`

	// Optional. Emoji associated with the sticker
	Emoji string `json:"emoji,omitempty"`

	// Optional. Name of the sticker set to which the sticker belongs
	SetName string `json:"set_name,omitempty"`

	// Optional. For mask stickers, the position where the mask should be placed
	MaskPosition *MaskPosition `json:"mask_position,omitempty"`

	// Optional. File size
	FileSize int `json:"file_size,omitempty"`
}

// This object represents a sticker set.
type StickerSet struct {
	// Sticker set name
	Name string `json:"name"`

	// Sticker set title
	Title string `json:"title"`

	// True, if the sticker set contains animated stickers
	IsAnimated bool `json:"is_animated"`

	// True, if the sticker set contains masks
	ContainsMasks bool `json:"contains_masks"`

	// List of all set stickers
	Stickers []Sticker `json:"stickers"`
}

// This object describes the position on faces where a mask should be placed by
// default.
type MaskPosition struct {
	// The part of the face relative to which the mask should be placed. One of
	// “forehead”, “eyes”, “mouth”, or “chin”.
	Point string `json:"point"`

	// Shift by X-axis measured in widths of the mask scaled to the face size, from
	// left to right. For example, choosing -1.0 will place mask just to the left of
	// the default mask position.
	XShift float64 `json:"x_shift"`

	// Shift by Y-axis measured in heights of the mask scaled to the face size, from
	// top to bottom. For example, 1.0 will place the mask just below the default mask
	// position.
	YShift float64 `json:"y_shift"`

	// Mask scaling coefficient. For example, 2.0 means double size.
	Scale float64 `json:"scale"`
}

type SendStickerRequest struct {
	// Unique identifier for the target chat or username of the target channel (in the
	// format @channelusername)
	ChatID string `json:"chat_id"`

	// Sticker to send. Pass a file_id as String to send a file that exists on the
	// Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get
	// a .webp file from the Internet, or upload a new one using multipart/form-data.
	// More info on Sending Files »
	Sticker Fileable `json:"sticker"`

	// Optional. Sends the message silently. Users will receive a notification with no
	// sound.
	DisableNotification bool `json:"disable_notification,omitempty"`

	// Optional. If the message is a reply, ID of the original message
	ReplyToMessageID int `json:"reply_to_message_id,omitempty"`

	// Optional. Additional interface options. A JSON-serialized object for an inline
	// keyboard, custom reply keyboard, instructions to remove reply keyboard or to
	// force a reply from the user.
	ReplyMarkup AnyKeyboard `json:"reply_markup,omitempty"`
}

// Use this method to send static .WEBP or animated .TGS stickers. On success, the
// sent Message is returned.
func (b *Bot) SendSticker(req *SendStickerRequest) (*Message, error) {
	j, err := b.makeRequest("sendSticker", req)
	if err != nil {
		return nil, err
	}

	var resp Message
	err = json.Unmarshal(j, &resp)
	return &resp, err
}

type GetStickerSetRequest struct {
	// Name of the sticker set
	Name string `json:"name"`
}

// Use this method to get a sticker set. On success, a StickerSet object is
// returned.
func (b *Bot) GetStickerSet(req *GetStickerSetRequest) (*StickerSet, error) {
	j, err := b.makeRequest("getStickerSet", req)
	if err != nil {
		return nil, err
	}

	var resp StickerSet
	err = json.Unmarshal(j, &resp)
	return &resp, err
}

type UploadStickerFileRequest struct {
	// User identifier of sticker file owner
	UserID int `json:"user_id"`

	// Png image with the sticker, must be up to 512 kilobytes in size, dimensions must
	// not exceed 512px, and either width or height must be exactly 512px. More info on
	// Sending Files »
	PngSticker *InputFile `json:"png_sticker"`
}

// Use this method to upload a .png file with a sticker for later use in
// createNewStickerSet and addStickerToSet methods (can be used multiple times).
// Returns the uploaded File on success.
func (b *Bot) UploadStickerFile(req *UploadStickerFileRequest) (*File, error) {
	j, err := b.makeRequest("uploadStickerFile", req)
	if err != nil {
		return nil, err
	}

	var resp File
	err = json.Unmarshal(j, &resp)
	return &resp, err
}

type CreateNewStickerSetRequest struct {
	// User identifier of created sticker set owner
	UserID int `json:"user_id"`

	// Short name of sticker set, to be used in t.me/addstickers/ URLs (e.g., animals).
	// Can contain only english letters, digits and underscores. Must begin with a
	// letter, can't contain consecutive underscores and must end in “_by_<bot
	// username>”. <bot_username> is case insensitive. 1-64 characters.
	Name string `json:"name"`

	// Sticker set title, 1-64 characters
	Title string `json:"title"`

	// Png image with the sticker, must be up to 512 kilobytes in size, dimensions must
	// not exceed 512px, and either width or height must be exactly 512px. Pass a
	// file_id as a String to send a file that already exists on the Telegram servers,
	// pass an HTTP URL as a String for Telegram to get a file from the Internet, or
	// upload a new one using multipart/form-data. More info on Sending Files »
	PngSticker Fileable `json:"png_sticker"`

	// One or more emoji corresponding to the sticker
	Emojis string `json:"emojis"`

	// Optional. Pass True, if a set of mask stickers should be created
	ContainsMasks bool `json:"contains_masks,omitempty"`

	// Optional. A JSON-serialized object for position where the mask should be placed
	// on faces
	MaskPosition *MaskPosition `json:"mask_position,omitempty"`
}

// Use this method to create new sticker set owned by a user. The bot will be able
// to edit the created sticker set. Returns True on success.
func (b *Bot) CreateNewStickerSet(req *CreateNewStickerSetRequest) (json.RawMessage, error) {
	return b.makeRequest("createNewStickerSet", req)
}

type AddStickerToSetRequest struct {
	// User identifier of sticker set owner
	UserID int `json:"user_id"`

	// Sticker set name
	Name string `json:"name"`

	// Png image with the sticker, must be up to 512 kilobytes in size, dimensions must
	// not exceed 512px, and either width or height must be exactly 512px. Pass a
	// file_id as a String to send a file that already exists on the Telegram servers,
	// pass an HTTP URL as a String for Telegram to get a file from the Internet, or
	// upload a new one using multipart/form-data. More info on Sending Files »
	PngSticker Fileable `json:"png_sticker"`

	// One or more emoji corresponding to the sticker
	Emojis string `json:"emojis"`

	// Optional. A JSON-serialized object for position where the mask should be placed
	// on faces
	MaskPosition *MaskPosition `json:"mask_position,omitempty"`
}

// Use this method to add a new sticker to a set created by the bot. Returns True
// on success.
func (b *Bot) AddStickerToSet(req *AddStickerToSetRequest) (json.RawMessage, error) {
	return b.makeRequest("addStickerToSet", req)
}

type SetStickerPositionInSetRequest struct {
	// File identifier of the sticker
	Sticker string `json:"sticker"`

	// New sticker position in the set, zero-based
	Position int `json:"position"`
}

// Use this method to move a sticker in a set created by the bot to a specific
// position . Returns True on success.
func (b *Bot) SetStickerPositionInSet(req *SetStickerPositionInSetRequest) (json.RawMessage, error) {
	return b.makeRequest("setStickerPositionInSet", req)
}

type DeleteStickerFromSetRequest struct {
	// File identifier of the sticker
	Sticker string `json:"sticker"`
}

// Use this method to delete a sticker from a set created by the bot. Returns True
// on success.
func (b *Bot) DeleteStickerFromSet(req *DeleteStickerFromSetRequest) (json.RawMessage, error) {
	return b.makeRequest("deleteStickerFromSet", req)
}
